" Matt Wang's vimrc, see more at https://github.com/ymattw/profiles

" Plugins managed by https://github.com/junegunn/vim-plug
"
if empty(glob('~/.vim/autoload/plug.vim'))
    echomsg "*** vim-plug is missing, see https://github.com/junegunn/vim-plug"
    finish
endif

set nocompatible
call plug#begin('~/.vim/plugged')

" LSP
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

let g:lsp_async_completion = 1
let g:lsp_diagnostics_float_insert_mode_enabled = 1
let g:lsp_diagnostics_virtual_text_enabled = 1
let g:lsp_diagnostics_virtual_text_prefix = 'üëà '
let g:lsp_diagnostics_virtual_text_align = 'after'
let g:lsp_diagnostics_virtual_text_wrap = 'truncate'
let g:lsp_diagnostics_virtual_text_padding_left = '4'
let g:lsp_preview_max_height = 20

" Default LSP server (pip install python-lsp-server)
if executable('pylsp')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pylsp',
        \ 'cmd': {server_info->['pylsp']},
        \ 'allowlist': ['python'],
        \ })
endif

Plug 'tpope/vim-markdown', {'for': 'markdown'}
Plug 'godlygeek/tabular', {'for': 'markdown'}
Plug 'digitaltoad/vim-jade', {'for': 'jade'}
Plug 'moll/vim-node', {'for': 'javascript'}
Plug 'Valloric/MatchTagAlways', {'for': 'html'}
Plug 'tpope/vim-commentary'             " gcc, gc<textobj> to toggle comments
Plug 'tpope/vim-endwise'
Plug 'ymattw/vim-fold-paragraph'        " My own folding preference

Plug 'elzr/vim-json', {'for': 'json'}
let g:vim_json_syntax_conceal = 0       " Do not hide quotes

Plug 'mileszs/ack.vim'
let g:ackprg = 'ag --vimgrep --smart-case'
let g:ackhighlight = 1
cnoreabbrev Ag Ack!
cnoreabbrev ag Ack!
cnoreabbrev Af AckFile!
cnoreabbrev af AckFile!

" neocomplete can beat YouCompleteMe in both functionality and installation
" friendly, it also replaces supertab and AutoComplPop.
if has('lua') && v:version < 802
    Plug 'Shougo/neocomplete.vim'
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#min_keyword_length = 3
    let g:neocomplete#auto_completion_start_length = 1
    inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"  " Tab completion
else
    Plug 'skywind3000/vim-auto-popmenu'
    let g:apc_enable_ft = {'*': 1}      " Enable for all filetypes
endif

" Remember to change terminal type to xterm-256color!
Plug 'altercation/vim-colors-solarized'

call plug#end()

if has('gui_running')
    set background=light
    if has('gui_mac') || has('gui_macvim')
        set guifont=Monaco:h13          " Fallback
        silent set guifont=AnonymicePro\ Nerd\ Font:h16
    elseif has('gui_gtk') || has('gui_gtk2')
        set guifont=Bitstream\ Vera\ Sans\ Mono\ 13
    endif
else
    set notermguicolors
    set background=dark
    set mouse=
    set t_ti= t_te=                     " Prevent clear screen after exit
endif

" Default color and font tunings, needs to be after plug#end()
silent! colorscheme solarized

" Override solarized setting to work with tmux config 'window-style'
highlight! Normal ctermbg=none

" Basic settings
"
set noswapfile nobackup                 " No tmp files
set suffixes+=.a,.so,.la,.class,.pyc    " Ignore list for file completion
set suffixes+=.jpg,.png,.gif,.pdf,.doc,.tar,.tgz,.gz,.bz2,.zip
set wildignore+=.git,*.o,*.a,*.so,*.la  " Ignore list for wildmenu completion
set wildignore+=*.class,*.pyc,*.swp
set wildignore+=*.jpg,*.png,*.gif,*.pdf,*.doc
set wildignore+=*.tar,*.gz,*.tgz,*.bz2,*.zip
set incsearch smartcase ignorecase hls  " Searching
set showmatch matchtime=2 scrolloff=4   " Interface
set guicursor=n-v-c-ci-sm:block         " Block shape for normal,visual,cmd,...
set guicursor+=r-cr:hor20-blinkon500-blinkoff250-blinkwait250
                                        " Horizental, blink for replace mode
set guicursor+=i-o:block-blinkon500-blinkoff250-blinkwait250
                                        " Block, blink for insert/pending
set encoding=utf-8 textwidth=80         " Editing
set backspace=indent,eol,start          " Editing
set timeoutlen=2000 ttimeoutlen=100     " Waiting time for mappings and key code
set comments-=:%                        " Do not let '%' lead a comment line
set formatoptions=tcqron1MB             " Formatting, MB for multi-byte chars
silent! set formatoptions+=j            " Vim >= 7.3.541 only
set wildmenu                            " Enhanced command-line completion
set wildmode=longest:full,full          " Misc: complete and list matched files
set wildcharm=<Tab>                     " So that to use <Tab> in nmap
silent! set wildoptions+=pum            " Show matches in popup menu, 8.2.4325+
set isfname-==                          " Misc: '=' is not part of filename
set matchpairs+=<:>                     " Misc: '%' can match <> pair in html
set smarttab shiftround shiftwidth=4    " Tab: default behaviour
set expandtab softtabstop=4 tabstop=8   " Tab: default to 4-space soft tab
set smartindent autoindent copyindent   " Indenting
set spelllang=en_us
set dictionary+=~/.vim/dictionary       " For keyword completion
set completeopt=menuone,noselect        " Auto completion menu
set complete+=kspell                    " Spell completion, see imap <C-K>
set complete+=k~/.vim/dictionary
set complete-=.
set synmaxcol=150 lazyredraw ttyfast    " Performance
syntax sync minlines=50 maxlines=200    " Performance
silent! set nowildignorecase            " Vim >= 7.3.072 only
silent! set nofileignorecase            " Vim >= 7.3.872 only
silent! set nofoldenable                " Default off, often n/a in containder
silent! set foldmethod=manual           " Work with ymattw/vim-fold-paragraph

" Highlight invisible chars and trailing spaces, also displays extend and
" precede chars for nowrap mode.  Poor Windows users: switch to Mac/Linux or
" use alternate chars such as >, _, . instead  (:h dig to see more)
set list listchars=tab:‚ñ∏\ ,trail:‚ñå,extends:¬ª,precedes:¬´

" File type detect
autocmd! BufEnter *[Mm]akefile*,[Mm]ake.*,*.mak,*.make setlocal filetype=make
autocmd! BufEnter *.md,*.markdown setlocal filetype=markdown spell
autocmd! BufEnter Gemfile,Berksfile,Thorfile,Vagrantfile setlocal filetype=ruby

" File type tab size
autocmd! FileType html,css,ruby,eruby,yaml,json,javascript,jade
            \ setlocal expandtab softtabstop=2 shiftwidth=2
autocmd! FileType make setlocal noexpandtab shiftwidth=8
autocmd! FileType go setlocal noexpandtab shiftwidth=8 nolist
autocmd! FileType gitcommit setlocal textwidth=72 spell

" Better color for matched parenthesis
highlight! MatchParen cterm=underline ctermfg=7 ctermbg=0

" Better color for folded text (treat as comment)
highlight! Folded cterm=bold ctermfg=10 ctermbg=0

" Better color for Solarized theme in diff mode
highlight! DiffDelete ctermfg=10 ctermbg=0
highlight! DiffAdd cterm=bold ctermfg=70 ctermbg=0
highlight! DiffChange cterm=bold ctermfg=142 ctermbg=0
highlight! DiffText cterm=underline ctermfg=142 ctermbg=0

" More colors suitable for Solarized dark background
highlight! link ColorColumn Search
highlight! link CharAtCol81 WarningMsg
highlight! link SpecialChars ErrorMsg
match CharAtCol81 /\%81v/                       " Mark char at column 81 in red
2match SpecialChars /\%xa0\|[‚Äú‚Äù‚Äò‚Äô‚Äî]/            " nbsp & smartly replaced chars

" Statusline, underlined status line looks better with cursor line
set noruler laststatus=2                        " Always show status line
set stl=                                        " Reset
set stl+=\ %0*%n%*                              " Buffer number
set stl+=\ %0*%f%*                              " Short pathname
set stl+=\ %3*%m%*                              " Modified flag
set stl+=\ %3*%r%*                              " Readonly flag
set stl+=\ %1*[%{&ft}]%*                        " File type
set stl+=\ %1*%{&enc}%*                         " File encoding
set stl+=\ %3*%{&ff=='dos'?'dos':''}%*          " Dos format flag
set stl+=\ %3*%{&ic?'ic':'noic'}%*              " Ignorecase flag
set stl+=\ %3*%{&et?'et:'.&sts:'noet:'.&ts}%*   " Expandtab and (soft)tabstop
set stl+=\ %2*%{&hls?'hls':''}%*                " Highlight search flag
set stl+=\ %2*%{&list?'list':''}%*              " List mode flag
set stl+=\ %3*%{&paste?'paste':''}%*            " Paste mode flag
set stl+=\ %0*%=%*                              " Start to align right
set stl+=\ %0*%4l,%-2v%*                        " Line and column info
set stl+=\ %0*%3p%%%*                           " Line percentage
highlight! User1 cterm=underline ctermfg=white
               \ gui=underline guibg=#ccc6b3 guifg=#fdf6e3
highlight! User2 cterm=underline ctermfg=magenta
               \ gui=underline guibg=#ccc6b3 guifg=magenta
highlight! User3 cterm=underline ctermfg=red ctermbg=0
               \ gui=underline guibg=#ccc6b3 guifg=red
highlight! StatusLine cterm=underline ctermfg=blue
               \ gui=underline guibg=#ccc6b3
highlight! StatusLineNC cterm=underline ctermfg=grey
               \ gui=underline guibg=#eee8d5

" Global key maps. Make sure <BS> and <C-H> are different in terminal setting!
let mapleader = ' '

" Maps for normal mode
nnoremap <BS>       :set ic!<CR>|           " Toggle ignore case
nnoremap <C-A>      <Nop>|                  " Avoid accidental edit
nnoremap <C-H>      :nohlsearch<CR>|        " Stop highlight search temporarily
nnoremap <C-J>      <C-W>w|                 " Cycle to next window
nnoremap <C-K>      :%s/[ \t]\+$//<CR>|     " Remove trailing blank
nnoremap <C-N>      :set nu!<CR>|           " Ctrl-n to toggle :set number
nnoremap <C-P>      :set paste!<CR>|        " Ctrl-p to toggle paste mode
nnoremap <C-\>      :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
                                            " Ctrl-\ to open tag in vsplit
nnoremap -          :call ToggleFoldParagraph()<CR>|
nnoremap _          :silent! set cursorline!<CR>
nnoremap \          :set list!<CR>
nnoremap \|         :silent! set cursorcolumn!<CR>
nnoremap q:         :q|                     " q: is boring
nnoremap !!         :q!<CR>|                " Quit without saving
nnoremap Q          gqip|                   " Format current paragraph
nnoremap qq         :q<CR>|                 " Quickly close current window
nnoremap qa         :qa<CR>|                " Quickly close all windows
nnoremap [          :tabprevious<CR>|       " Previous tab
nnoremap ]          :tabnext<CR>|           " Next tab

nnoremap <leader>\| :call ToggleColorColumn()<CR>
nnoremap <leader>2  :set et sts=2 sw=2<CR>| " Use 2-space indent
nnoremap <leader>4  :set et sts=4 sw=4<CR>| " Use 4-space indent
nnoremap <Leader>d  :cd %:h<CR>:pwd<CR>|    " Switch to dir of current file
nnoremap <Leader>-  :cd -<CR>:pwd<CR>|      " Switch back to previous dir
nnoremap <Leader>e  :tabedit |              " Quick tabedit new file
nnoremap <Leader>E  :tabedit %:h/<Tab>|     " Quick tabedit file from same dir
nnoremap <Leader>f  <C-w>gf|                " Open file under cursor in new tab
nnoremap <Leader>h  :tabprevious<CR>|       " Previous tab
nnoremap <Leader>l  :tabnext<CR>|           " Next tab
nnoremap <leader>q  :qall<CR>|              " Quickly quit vim
nnoremap <leader>s  :Ack! -w <cword><CR>|   " Quick search word under cursor
nnoremap <Leader>t  <C-w><C-]><C-w>T|       " Open tag in new tab
nnoremap <leader>w  :w<CR>|                 " Save 2 key strokes
nnoremap <leader><CR>       :set wrap!<CR>
nnoremap <leader><Tab>      :call ToggleTab()<CR>

" Maps for insert mode
inoremap <C-J>      <ESC>kJA|               " Join to prev line (undo auto wrap)
inoremap <C-A>      <C-O>I|                 " Emacs style Home
inoremap <C-E>      <C-O>A|                 " Emacs style End
inoremap <C-F>      <C-X><C-F>|             " Complete filename
inoremap <C-K>      <C-X><C-K>|             " Complete spell from words

if executable('ydiff')
  nnoremap <leader>y :!ydiff %<CR>
  nnoremap <leader>Y :!ydiff<CR>
endif

" Maps for command mode
cnoremap w!!        w !sudo tee % > /dev/null

" LSP mappings
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=auto
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nnoremap <buffer> <leader>d       :LspPeekDefinition<CR>
    nnoremap <buffer> <leader>D       :LspDefinition<CR>
    nnoremap <buffer> <leader><Space> :LspHover<CR>
    nnoremap <buffer> <leader>i       :LspPeekImplementation<CR>
    nnoremap <buffer> <leader>I       :LspImplementation<CR>
    nnoremap <buffer> <leader>r       :LspReferences<CR>
    nnoremap <buffer> <leader>j       :cnext<CR>
    nnoremap <buffer> <leader>k       :cprevious<CR>
    nnoremap <buffer> <leader>t       :LspPeekTypeDefinition<CR>
    nnoremap <buffer> <leader>T       :LspTypeDefinition<CR>
endfunction

augroup lsp_install
    autocmd!
    " Call only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" File type key mappings.
autocmd FileType markdown   nnoremap <buffer> T
            \ vip:Tabularize /\|<CR>|     " Tabularize markdown tables
autocmd Filetype html       nnoremap <buffer> %
            \ :MtaJumpToOtherTag<CR>|     " See MatchTagAlways

" Mode key mappings
if exists('&diff') && &diff
    nnoremap qq         :qa<CR>|            " Close all windows
    nnoremap <Up>       [c|                 " Previous change
    nnoremap <Down>     ]c|                 " Next change
    nnoremap <Left>     <C-w>h|             " Left window
    nnoremap <Right>    <C-w>l|             " Right window
    nnoremap <C-L>      :diffupdate<CR>|    " Refresh diff
else
    nnoremap <Up>       <C-w>k|             " Upper window
    nnoremap <Down>     <C-w>j|             " Bottom window
    nnoremap <Left>     :tabprevious<CR>|   " Left & right preserved for tabs
    nnoremap <Right>    :tabnext<CR>|       " Use <C-J> to cycle in vsplits
endif

" Misc
"
let python_highlight_all = 1

autocmd VimResized * :wincmd =              " Realign vim window size
autocmd InsertLeave * set nopaste           " Saves a <C-P>

" Not for quickfix buffer
autocmd! BufWinEnter *
    \ if &buftype == 'quickfix' |
    \     silent! nunmap <CR>|
    \ else |
    \     nnoremap <buffer> <CR> :set spell!<CR>|
    \ endif

" Remember last cursor postion, :h last-position-jump
set viminfo='10,\"10,<50,s10,%,h,f10
autocmd! BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     exe "normal! g`\"" |
    \ endif

if exists('&cursorline')
    set cursorline
    augroup ActiveBuffer
        autocmd! WinEnter * setlocal cursorline
        autocmd! WinLeave * setlocal nocursorline
    augroup END
endif

" 'R' to run a shell command and load output in a scratch buffer
command! -nargs=* -complete=shellcmd R new
    \ | setlocal buftype=nofile bufhidden=hide
    \ | r !<args>

" Helper functions
function! ToggleTab()
    let expr = &et == 1 ? "setl noet sw=8" : "setl et sw=".&sts
    exe expr
endfunction

function! ToggleColorColumn()
    let expr = &cc == "" ? "setl cc=+1" : "setl cc="
    exe expr
endfunction

" Other customization can be put in ~/.vim/after/plugin/ to be loaded the last.

" vim:set et sts=4 sw=4:
